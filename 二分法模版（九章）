问题：给定一个排序的整数数组（升序）和一个要查找的整数target，用O(logn)的时间查找到target第一次出现的下标（从0开始），如果target不存在于数组中，返回-1。

注意的2个点：
1. start + 1 < end（在这种情况下，跳出循环时start + 1 = end，是两个相邻的点）
2.如果找第一个，那么return时要先判断start（测试:[1,1]）&& 不能遇到nums[mid] == target 就返回
---------------------------------------------------------
正确code模版
class Solution:
    """
    @param nums: The integer array.
    @param target: Target to find.
    @return: The first position of target. Position starts from 0.
    """
    def binarySearch(self, nums, target):
        
        start, end = 0, len(nums) - 1
        
        while start+1 < end:
            mid = (start+end) // 2
            #print("start",start)
            #print("end",end)
            if nums[mid] >= target:
                end = mid
            elif nums[mid] < target:
                start = mid 
            
        
        if nums[end] == target:
            return end
        if nums[start] == target:
            return start
        return -1



---------------------------------------------------------
---------------------------------------------------------
原始code：

class Solution:
    """
    @param nums: The integer array.
    @param target: Target to find.
    @return: The first position of target. Position starts from 0.
    """
    def binarySearch(self, nums, target):
    
        start, end = 0, len(nums) - 1
        
        while start < end:
            mid = (start+end) // 2
            
            if nums[mid] > target:
                end = mid
            elif nums[mid] < target:
                start = mid 
            elif nums[mid] == target:
                return mid
        
        return start
       
---------------------------------------------------------
若考虑第一个出现的下标:测试数据[3,4,5,8,8,8,8,10,13,14]

修改为：
while start+1 < end:
            mid = (start+end) // 2
            #print("start",start)
            #print("end",end)
            if nums[mid] >= target:
                end = mid
            elif nums[mid] < target:
                start = mid 
            
        
        if nums[end] == target:
            return end
        if nums[start] == target:
            return start
        return -1
---------------------------------------------------------      
若考虑start和end最后相邻了，target = end，将陷入mid=start的死循环：测试数据[1,4,4,5,7,7,8,9,9,10]

修改为：
while start+1 < end:
            mid = (start+end) // 2
            
            if nums[mid] >= target:
                end = mid
            if nums[mid] < target:
                start = mid 
---------------------------------------------------------
        
        
        
        
        










