1. 相较于快速排序，会额外花费O(n)的空间（开辟删除空间对时间的耗费也很大）
思路：1. 结构: 调用mergesort(start, end, A),然后分为左右部分，分别再mergesort,最后调用merge(start, end, arr)。递归的是mergesort
2. 需要注意的bug点：
  (1)mergesort(mid+1, end, arr)，test case: [1,2]
  (2)需要在merge中有个temp数组存排序好的元素，在付给arr，注意赋值时的index对应

代码：
class Solution:
    """
    @param A: an integer array
    @return: nothing
    """
    def sortIntegers2(self, A):
        
        self.mergeSort(0, len(A) - 1, A)
    
    def mergeSort(self, start, end, arr):
        if start >= end:
            return 
        mid = (start + end) // 2
        self.mergeSort(start, mid, arr)
        self.mergeSort(mid+1, end, arr)
        self.merge(start, end , arr)
        
    def merge(self, start, end, arr):
        mid = (start+end) // 2
        left, right = start, mid + 1
        temp = []
        while left <=mid and right <= end:
            if arr[left] < arr[right]:
                temp.append(arr[left])
                left += 1
            else:
                temp.append(arr[right])
                right += 1
            
        while left <= mid:
            temp.append(arr[left])
            left += 1
            
        while right <= end:
            temp.append(arr[right])
            right += 1
        
        count = 0
        for i in range(start,end+1):
            arr[i] = temp[count]
            count += 1










